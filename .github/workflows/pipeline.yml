name: Pipeline

on:
  push:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  CODEDEPLOY_APP: MyLambdaCodeDeployApp
  CODEDEPLOY_GROUP: MyLambdaDeploymentGroup

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # old_version: ${{ steps.old-version.outputs.old_version }}
      # new_version: ${{ steps.new-version.outputs.new_version }}
      old_version: 8
      new_version: 9
    steps:
      - uses: actions/checkout@v4
      # - uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_wrapper: false
      # - run: terraform init -no-color
      # - id: plan
      #   run: terraform plan -no-color
      # - id: old-version
      #   run: echo "old_version=$(terraform output -no-color current_version)" >> $GITHUB_OUTPUT
      # - id: apply
      #   run: terraform apply -auto-approve -no-color
      # - id: new-version
      #   run: echo "new_version=$(terraform output -no-color current_version)" >> $GITHUB_OUTPUT
      # - name: Echo both versions
      #   run: |
      #     echo "old_version=${{ steps.old-version.outputs.old_version }}"
      #     echo "new_version=${{ steps.new-version.outputs.new_version }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.old_version != needs.build.outputs.new_version
    steps:
      - uses: actions/checkout@v4
      - run: aws s3 ls
      - name: Generate JSON File for Deployment
        run: |
          cat <<EOF >deployment.json
          {
              "applicationName": "${CODEDEPLOY_APP}",
              "deploymentGroupName": "${CODEDEPLOY_GROUP}",
              "revision": {
                  "revisionType": "AppSpecContent",
                  "appSpecContent": {
                      "content": "{\"version\":0.0,\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::Lambda::Function\",\"Properties\":{\"Name\":\"MyLambdaFunction\",\"Alias\":\"live\",\"CurrentVersion\":${{needs.build.outputs.old_version}},\"TargetVersion\":${{needs.build.outputs.new_version}}}}}]}"
                  }
              }
          }
          EOF
      - run: cat deployment.json
      - name: Deploy
        run: |
          aws deploy create-deployment --cli-input-json file://deployment.json
